package org.example.kurs;

import java.time.Duration;
import java.time.LocalDateTime;

/**
 * Represents a table in the cafe.
 * Tracks its occupation status, earnings, and usage statistics.
 */
public class Table {
    private final int id;
    private boolean isOccupied;
    private LocalDateTime startTime;
    private long totalMinutesOccupied;
    private double totalEarnings;
    private long totalOccupancyCount;

    /**
     * Constructs a new Table instance with the given ID.
     *
     * @param id the unique identifier for this table
     */
    public Table(int id) {
        this.id = id;
        this.isOccupied = false;
        this.startTime = null;
        this.totalMinutesOccupied = 0;
        this.totalEarnings = 0.0;
        this.totalOccupancyCount = 0;
    }

    /**
     * Gets the unique identifier of the table.
     *
     * @return the ID of the table
     */
    public int getId() {
        return id;
    }

    /**
     * Checks if the table is currently occupied.
     *
     * @return true if the table is occupied, false otherwise
     */
    public boolean isOccupied() {
        return isOccupied;
    }

    /**
     * Marks the table as occupied and records the start time.
     */
    public void occupyTable() {
        if (!isOccupied) {
            isOccupied = true;
            startTime = LocalDateTime.now();
        }
    }

    /**
     * Frees the table and calculates the total earnings for the occupation period.
     *
     * @param pricePerMinute the price per minute of table usage
     */
    public void freeTable(double pricePerMinute) {
        if (isOccupied) {
            Duration duration = Duration.between(startTime, LocalDateTime.now());
            long minutes = duration.toMinutes();
            totalMinutesOccupied += minutes;
            totalEarnings += minutes * pricePerMinute;
            totalOccupancyCount++; // Increment the occupancy count
            isOccupied = false;
            startTime = null;
        }
    }

    /**
     * Gets the total minutes the table has been occupied.
     *
     * @return the total minutes the table was occupied
     */
    public long getTotalMinutesOccupied() {
        return totalMinutesOccupied;
    }

    /**
     * Gets the total earnings generated by the table.
     *
     * @return the total earnings from the table
     */
    public double getTotalEarnings() {
        return totalEarnings;
    }

    /**
     * Gets the start time of the current occupation.
     *
     * @return the start time if occupied, or null if not occupied
     */
    public LocalDateTime getStartTime() {
        return startTime;
    }

    /**
     * Gets the total number of times the table has been occupied.
     *
     * @return the total occupancy count
     */
    public long getTotalOccupancyCount() {
        return totalOccupancyCount;
    }
}